diff --git gcc/cp/cfns.gperf gcc/cp/cfns.gperf
index ef1ed083d32..ba0c487a603 100644
--- gcc/cp/cfns.gperf
+++ gcc/cp/cfns.gperf
@@ -22,6 +22,9 @@ __inline
 static unsigned int hash (const char *, unsigned int);
 #ifdef __GNUC__
 __inline
+#ifdef __GNUC_STDC_INLINE__
+__attribute__ ((__gnu_inline__))
+#endif
 #endif
 const char * libc_name_p (const char *, unsigned int);
 %}
diff --git gcc/cp/cfns.h gcc/cp/cfns.h
index 62cdfab93aa..7da9ad19330 100644
--- gcc/cp/cfns.h
+++ gcc/cp/cfns.h
@@ -59,6 +59,9 @@ const char * libc_name_p (const char *, unsigned int);
 
 #ifdef __GNUC__
 __inline
+#ifdef __GNUC_STDC_INLINE__
+__attribute__ ((__gnu_inline__))
+#endif
 #else
 #ifdef __cplusplus
 inline
diff --git libcpp/expr.c libcpp/expr.c
index d56e56a6311..4c2a69a445c 100644
--- libcpp/expr.c
+++ libcpp/expr.c
@@ -594,9 +594,9 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,
 		                : N_("use of C99 long long integer constant");
 
 	  if (CPP_OPTION (pfile, c99))
-            cpp_warning (pfile, CPP_W_LONG_LONG, message);
+            cpp_warning (pfile, CPP_W_LONG_LONG, "%s", message);
           else
-            cpp_pedwarning (pfile, CPP_W_LONG_LONG, message);
+            cpp_pedwarning (pfile, CPP_W_LONG_LONG, "%s", message);
         }
 
       result |= CPP_N_INTEGER;
@@ -1741,6 +1741,7 @@ num_binary_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs, enum cpp_ttype op)
       /* Arithmetic.  */
     case CPP_MINUS:
       rhs = num_negate (rhs, precision);
+      /* fall-through */
     case CPP_PLUS:
       result.low = lhs.low + rhs.low;
       result.high = lhs.high + rhs.high;
